/**
 * \def AE_NONE
 * \brief 表示没有注册任何事件。
 * 
 * 当使用此宏时，意味着没有为文件描述符注册任何可读或可写事件。
 */

/**
 * \def AE_READABLE
 * \brief 当文件描述符可读时触发事件。
 * 
 * 若为文件描述符注册了此事件，当该描述符变为可读状态时，相应的事件处理机制会被触发。
 */

/**
 * \def AE_WRITABLE
 * \brief 当文件描述符可写时触发事件。
 * 
 * 若为文件描述符注册了此事件，当该描述符变为可写状态时，相应的事件处理机制会被触发。
 */

/**
 * \def AE_BARRIER
 * \brief 与 AE_WRITABLE 配合使用，避免在同一事件循环迭代中，若 READABLE 事件已触发则不再触发此事件。
 * 
 * 此宏在需要在发送回复之前将数据持久化到磁盘，并且希望以分组方式进行操作时非常有用。
 */
 
/**
\struct aeFileEvent
\brief 定义文件事件结构体，用于表示文件描述符上的事件。
该结构体包含了文件描述符上的事件掩码、读写事件处理函数以及客户端数据指针。
它用于在事件循环中跟踪和处理文件描述符上的读写事件。

\var aeFileEvent::mask
\brief 事件掩码，用于表示文件描述符上的事件类型。
可以是 AE_READABLE 或 AE_WRITABLE 或两者的组合。

\var aeFileEvent::rfileProc
\brief 读事件处理函数，当文件描述符可读时调用。

\var aeFileEvent::wfileProc
\brief 写事件处理函数，当文件描述符可写时调用。

\var aeFileEvent::clientData
\brief 客户端数据指针，用于传递额外的信息给事件处理函数。
*/

/**
\struct aeFiredEvent
\brief 表示已触发的事件结构体，用于记录文件描述符和对应的事件掩码。
该结构体在事件循环中，当文件描述符上的事件被触发时使用，存储触发事件的文件描述符和事件类型。

\var aeFiredEvent::fd
\brief 文件描述符，标识发生事件的文件或套接字。

\var aeFiredEvent::mask
\brief 事件掩码，指示该文件描述符上触发的事件类型，如 AE_READABLE 或 AE_WRITABLE。
*/


/**
\struct aeTimeEvent
\brief 定义时间事件结构体，用于表示定时触发的事件。
该结构体包含了时间事件的标识符、触发时间、处理函数、清理函数、客户端数据以及链表指针等信息。
它用于在事件循环中跟踪和处理定时事件。

\var aeTimeEvent::id
\brief 时间事件的唯一标识符，用于区分不同的时间事件。

\var aeTimeEvent::when
\brief 时间事件的触发时间，使用 `monotime` 类型表示。

\var aeTimeEvent::timeProc
\brief 时间事件的处理函数，当时间事件触发时调用。

\var aeTimeEvent::finalizerProc
\brief 时间事件的清理函数，在时间事件被删除时调用。

\var aeTimeEvent::clientData
\brief 客户端数据指针，用于传递额外的信息给时间事件处理函数。

\var aeTimeEvent::prev
\brief 指向前一个时间事件的指针，用于构建双向链表。

\var aeTimeEvent::next
\brief 指向后一个时间事件的指针，用于构建双向链表。

\var aeTimeEvent::refcount
\brief 引用计数，用于防止在递归调用时间事件时释放事件资源。
*/

/**
\struct aeEventLoop
\brief 定义事件循环结构体，用于管理文件事件和时间事件。
该结构体包含了事件循环所需的各种信息，如最大文件描述符、可跟踪的最大文件描述符数量、时间事件 ID、注册事件、触发事件、时间事件链表头、停止标志、轮询 API 特定数据、睡眠前后的回调函数、自定义轮询函数、互斥锁和标志位等。

\var aeEventLoop::maxfd
\brief 当前注册的最高文件描述符。

\var aeEventLoop::setsize
\brief 事件循环能够跟踪的最大文件描述符数量。

\var aeEventLoop::timeEventNextId
\brief 下一个时间事件的唯一标识符。

\var aeEventLoop::events
\brief 指向已注册事件数组的指针，用于存储文件事件。

\var aeEventLoop::fired
\brief 指向已触发事件数组的指针，用于存储已触发的文件事件。

\var aeEventLoop::timeEventHead
\brief 时间事件链表的头指针，用于管理所有的时间事件。

\var aeEventLoop::stop
\brief 停止标志，非零值表示事件循环应停止运行。

\var aeEventLoop::apidata
\brief 用于存储轮询 API 特定的数据，不同的轮询机制可能会使用该指针存储不同的数据。

\var aeEventLoop::beforesleep
\brief 事件循环进入睡眠状态之前调用的回调函数指针。

\var aeEventLoop::aftersleep
\brief 事件循环从睡眠状态唤醒之后调用的回调函数指针。

\var aeEventLoop::custompoll
\brief 自定义轮询函数指针，允许用户提供自定义的事件轮询逻辑。

\var aeEventLoop::poll_mutex
\brief 用于保护轮询操作的互斥锁，确保线程安全。

\var aeEventLoop::flags
\brief 事件循环的标志位，用于控制事件循环的行为，如是否等待、是否调用睡眠前后的回调函数等。
*/

/**
 * \fn aeEventLoop *aeCreateEventLoop(int setsize)
 * \brief 创建一个新的事件循环。
 *
 * 初始化一个新的事件循环实例，用于管理文件事件和时间事件。
 *
 * \param setsize 事件循环能够跟踪的最大文件描述符数量。
 * \return 指向新创建的事件循环的指针，若创建失败则返回 NULL。
 */

/**
 * \fn void aeDeleteEventLoop(aeEventLoop *eventLoop)
 * \brief 删除一个事件循环。
 *
 * 释放事件循环占用的所有资源，包括文件事件、时间事件等。
 *
 * \param eventLoop 要删除的事件循环实例。
 */

/**
 * \fn void aeStop(aeEventLoop *eventLoop)
 * \brief 停止事件循环。
 *
 * 设置事件循环的停止标志，使其在下一次循环检查时退出。
 *
 * \param eventLoop 要停止的事件循环实例。
 */

/**
 * \fn int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask, aeFileProc *proc, void *clientData)
 * \brief 为指定文件描述符创建一个文件事件。
 *
 * 注册一个文件事件，当指定文件描述符上发生相应事件时，会调用对应的处理函数。
 *
 * \param eventLoop 事件循环实例。
 * \param fd 文件描述符。
 * \param mask 事件掩码，指定要监听的事件类型（如 AE_READABLE、AE_WRITABLE 等）。
 * \param proc 事件处理函数。
 * \param clientData 用户自定义数据，会传递给事件处理函数。
 * \return 若事件创建成功返回 AE_OK，失败则返回 AE_ERR。
 */

/**
 * \fn void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)
 * \brief 删除指定文件描述符的文件事件。
 *
 * 取消对指定文件描述符上特定事件的监听。
 *
 * \param eventLoop 事件循环实例。
 * \param fd 文件描述符。
 * \param mask 要删除的事件掩码。
 */

/**
 * \fn int aeGetFileEvents(aeEventLoop *eventLoop, int fd)
 * \brief 获取指定文件描述符的当前事件掩码。
 *
 * 查询指定文件描述符当前注册的事件类型。
 *
 * \param eventLoop 事件循环实例。
 * \param fd 文件描述符。
 * \return 当前文件描述符的事件掩码。
 */

/**
 * \fn void *aeGetFileClientData(aeEventLoop *eventLoop, int fd)
 * \brief 获取指定文件描述符的客户端数据。
 *
 * 返回与指定文件描述符关联的用户自定义数据。
 *
 * \param eventLoop 事件循环实例。
 * \param fd 文件描述符。
 * \return 指向客户端数据的指针。
 */

/**
 * \fn long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds, aeTimeProc *proc, void *clientData, aeEventFinalizerProc *finalizerProc)
 * \brief 创建一个时间事件。
 *
 * 注册一个时间事件，在指定的时间间隔后触发相应的处理函数。
 *
 * \param eventLoop 事件循环实例。
 * \param milliseconds 时间事件的触发间隔（毫秒）。
 * \param proc 时间事件处理函数。
 * \param clientData 用户自定义数据，会传递给时间事件处理函数。
 * \param finalizerProc 时间事件清理函数，在事件删除时调用。
 * \return 新创建的时间事件的唯一标识符，若创建失败则返回 AE_DELETED_EVENT_ID。
 */

/**
 * \fn int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)
 * \brief 删除指定 ID 的时间事件。
 *
 * 取消对指定 ID 的时间事件的监听，并调用清理函数释放相关资源。
 *
 * \param eventLoop 事件循环实例。
 * \param id 要删除的时间事件的唯一标识符。
 * \return 若删除成功返回 1，失败返回 0。
 */

/**
 * \fn int aeProcessEvents(aeEventLoop *eventLoop, int flags)
 * \brief 处理事件循环中的事件。
 *
 * 检查并处理文件事件和时间事件，根据指定的标志控制处理行为。
 *
 * \param eventLoop 事件循环实例。
 * \param flags 处理标志，可组合使用（如 AE_ALL_EVENTS、AE_DONT_WAIT 等）。
 * \return 处理的事件数量。
 */

/**
 * \fn int aeWait(int fd, int mask, long long milliseconds)
 * \brief 等待指定文件描述符上的事件。
 *
 * 阻塞当前线程，直到指定文件描述符上发生指定事件或超时。
 *
 * \param fd 文件描述符。
 * \param mask 要等待的事件掩码。
 * \param milliseconds 最大等待时间（毫秒），-1 表示无限等待。
 * \return 若事件发生返回 1，超时返回 0，出错返回 -1。
 */

/**
 * \fn void aeMain(aeEventLoop *eventLoop)
 * \brief 启动事件循环的主循环。
 *
 * 开始事件循环，持续处理文件事件和时间事件，直到事件循环被停止。
 *
 * \param eventLoop 事件循环实例。
 */

/**
 * \fn char *aeGetApiName(void)
 * \brief 获取当前使用的事件轮询 API 的名称。
 *
 * 返回当前事件循环所使用的底层轮询机制的名称（如 "epoll"、"kqueue" 等）。
 *
 * \return 指向表示 API 名称的字符串的指针。
 */

/**
 * \fn void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep)
 * \brief 设置事件循环进入睡眠前的回调函数。
 *
 * 在事件循环进入睡眠状态之前，会调用此回调函数。
 *
 * \param eventLoop 事件循环实例。
 * \param beforesleep 进入睡眠前的回调函数。
 */

/**
 * \fn void aeSetAfterSleepProc(aeEventLoop *eventLoop, aeAfterSleepProc *aftersleep)
 * \brief 设置事件循环睡眠后的回调函数。
 *
 * 在事件循环从睡眠状态唤醒之后，会调用此回调函数。
 *
 * \param eventLoop 事件循环实例。
 * \param aftersleep 睡眠后的回调函数。
 */

/**
 * \fn void aeSetCustomPollProc(aeEventLoop *eventLoop, aeCustomPollProc *custompoll)
 * \brief 设置事件循环的自定义轮询函数。
 *
 * 允许用户提供自定义的事件轮询逻辑。
 *
 * \param eventLoop 事件循环实例。
 * \param custompoll 自定义轮询函数。
 */

/**
 * \fn void aeSetPollProtect(aeEventLoop *eventLoop, int protect)
 * \brief 设置事件循环的轮询保护标志。
 *
 * 启用或禁用事件轮询的保护机制。
 *
 * \param eventLoop 事件循环实例。
 * \param protect 非零值表示启用保护，零表示禁用。
 */

/**
 * \fn int aePoll(aeEventLoop *eventLoop, struct timeval *tvp)
 * \brief 执行事件轮询。
 *
 * 调用底层的轮询机制检查文件描述符上的事件。
 *
 * \param eventLoop 事件循环实例。
 * \param tvp 超时时间结构体，指定轮询的最大等待时间。
 * \return 发生的事件数量。
 */

/**
 * \fn int aeGetSetSize(aeEventLoop *eventLoop)
 * \brief 获取事件循环能够跟踪的最大文件描述符数量。
 *
 * 返回事件循环当前配置的最大文件描述符跟踪数量。
 *
 * \param eventLoop 事件循环实例。
 * \return 最大文件描述符跟踪数量。
 */

/**
 * \fn int aeResizeSetSize(aeEventLoop *eventLoop, int setsize)
 * \brief 调整事件循环能够跟踪的最大文件描述符数量。
 *
 * 动态调整事件循环可以管理的最大文件描述符数量。
 *
 * \param eventLoop 事件循环实例。
 * \param setsize 新的最大文件描述符跟踪数量。
 * \return 若调整成功返回 1，失败返回 0。
 */

/**
 * \fn void aeSetDontWait(aeEventLoop *eventLoop, int noWait)
 * \brief 设置事件循环是否不进行等待操作。
 *
 * 此函数用于控制事件循环在处理事件时是否等待。当设置为不等待时，事件循环会立即处理事件而不阻塞。
 *
 * \param eventLoop 指向事件循环实例的指针，代表要进行设置的事件循环。
 * \param noWait 若为非零值，则表示事件循环不等待；若为零，则表示事件循环会等待。
 */
